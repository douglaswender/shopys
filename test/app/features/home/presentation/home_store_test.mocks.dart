// Mocks generated by Mockito 5.0.12 from annotations
// in shopys/test/app/features/home/presentation/home_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopys/app/core/error/failures.dart' as _i6;
import 'package:shopys/app/core/usecase/usecase.dart' as _i8;
import 'package:shopys/app/features/home/domain/entities/product_entity.dart'
    as _i7;
import 'package:shopys/app/features/home/domain/repositories/product_repository.dart'
    as _i2;
import 'package:shopys/app/features/home/domain/usecases/get_product_list_usecase.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeIProductRepository extends _i1.Fake
    implements _i2.IProductRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetProductListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductListUsecase extends _i1.Mock
    implements _i4.GetProductListUsecase {
  MockGetProductListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProductRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeIProductRepository()) as _i2.IProductRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue:
              Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>>.value(
                  _FakeEither<_i6.Failure, List<_i7.ProductEntity>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>>);
}
